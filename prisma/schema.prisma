generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model job_requisitions {
  id              Int       @id @default(autoincrement())
  job_title       String?   @db.VarChar(50)
  job_description String?   @db.Text
  company_id      Int?
  completed_state String?   @db.VarChar(50)
  created_at      DateTime? @db.Date
  updated_at      DateTime? @db.Date
  salary          Decimal?  @db.Decimal(6, 2)
  owner_user_id   String?   @db.VarChar(50)
}

model roles {
  name  String  @db.VarChar(100)
  id    Int     @id @default(autoincrement())
  users users[]
}

model users {
  UUID       String       @id @default(uuid()) @db.VarChar(36)
  Email      String       @unique @db.VarChar(100)
  UserName   String       @unique @db.VarChar(100)
  Password   String       @db.VarChar(250)
  role_id    Int
  roles      roles        @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "users_FK")
  dashboards dashboards[]
}

model dashboards {
  uuid           String   @id @default(uuid()) @db.VarChar(36)
  dashboard_name String   @db.VarChar(100)
  owner_id       String
  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @default(now()) @db.Timestamp(0)
  users          users    @relation(fields: [owner_id], references: [UUID], onUpdate: Restrict, map: "dashboards_FK", onDelete: Cascade)
  charts         charts[]
}

model charts {
  uuid           String     @id @default(uuid()) @db.Char(36)
  chart_name     String     @db.VarChar(56)
  width          Int
  height         Int
  x_axis         Int
  y_axis         Int
  dashboard_uuid String
  dashboards     dashboards @relation(fields: [dashboard_uuid], references: [uuid], onDelete: Cascade)
}
